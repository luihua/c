{
	// Place your c 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "*****": {
        "prefix":[ "s**","S**"],
        "body": [ 
			"",
            "/*************************************************************************************************/",
			"",
        ],
        "description": "分隔符",
        "scope": "c,cpp",
    },
    "MACRO": {
        "prefix":[ "M**","m**"],
        "body": [
			"",
            "/*******************************************MACRO-BEGIN*******************************************/",
			"/*************************************************************************************************/",
		    "$1",
			"/*************************************************************************************************/",
			"/*******************************************MACRO-END*********************************************/",
			"",



        ],
        "description": "宏定义",
        "scope": "c,cpp",
    },
    "TYPEDEF": {
        "prefix":[ "T**","t**"],
        "body": [
			"",
            "/*******************************************TYPEDEF-BEGIN*******************************************/",
			"/***************************************************************************************************/",
			"$1",
			"/***************************************************************************************************/",
			"/*******************************************TYPEDEF-END*********************************************/",
            "",
        ],
        "description": "结构体定义",
        "scope": "c,cpp",
    },
	"MAIN": {
        "prefix":[ "/main"],
        "body": [
			
            "/*******************************************int main()*********************************************/",
			"/**************************************************************************************************/",
			"int main()",
			"{",
			"\t$1",
			"}",
			
		],
        "description": "main函数",
        "scope": "c,cpp",
	},

	"DEFONCE": {
        "prefix":[ "IFN"],
        "body": [
			"#pragma once",
            "#ifndef $1",
			"#define $1",
			"#endif",
		],
        "description": "main函数",
        "scope": "c,cpp",
	},
		"INC0": {
			"prefix":[ "/inc"],
			"body": [
				"#include <stdio.h>",
				"#include <stdlib.h>",
				"#include <string.h>",
		],
		"description": "head",
        "scope": "c,cpp",
    },
		"Linklist": {
			"prefix":[ "/link"],
			"body": [
				"ListNode *head=nullptr;",
				"head=new ListNode(1);",
				"head->next=new ListNode(2);",
				"head->next->next= new ListNode(2);",
				"head->next->next->next = new ListNode(3);",
				"head->next->next->next->next = new ListNode(3);",
				"head->next->next->next->next->next = new ListNode(4);",
				"head->next->next->next->next->next->next= new ListNode(4);",
				"head->next->next->next->next->next->next->next= new ListNode(4);",
		],
		"description": "head",
		"scope": "c,cpp",
		
},
"List_Struct": {
	"prefix": "/lists",
	"body": [
	  "struct ListNode {",
	  "      int val;",
	  "      ListNode *next;",
	  "      ListNode() : val(0), next(nullptr) {}",
	  "      ListNode(int x) : val(x), next(nullptr) {}",
	  "      ListNode(int x, ListNode *next) : val(x), next(next) {}",
	  "  };"
	],
	"description": "List_Struct"
  },

}